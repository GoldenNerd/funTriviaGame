
// Grab all dots on each square of dice1
const dice1dot00 = document.getElementById('dice1dot00').style;
const dice1dot01 = document.getElementById('dice1dot01').style;
const dice1dot02 = document.getElementById('dice1dot02').style;
const dice1dot10 = document.getElementById('dice1dot10').style;
const dice1dot11 = document.getElementById('dice1dot11').style;
const dice1dot12 = document.getElementById('dice1dot12').style;
const dice1dot20 = document.getElementById('dice1dot20').style;
const dice1dot21 = document.getElementById('dice1dot21').style;
const dice1dot22 = document.getElementById('dice1dot22').style;
//++++++++++++++++++++++++++
// Prepare for next dice roll
function eraseDots(){
  // Erase both Dice faces: Turn off all dots on all squares by setting them to transparent color. The square class is a property of each square that contains a dot. Each dice face is a 6x6 matrixes of squares.
 const squaresCollection=document.getElementsByClassName('square');
 const squaresArray = Array.from(squaresCollection);
 squaresArray.forEach(function(item){
   item.style.color='transparent';
 });
}
//++++++++++++++++++++++++++
function rollADice(){
  // Produces a random number between 1 and 6, both inclusive.
const randomNumber = Math.floor(6*Math.random())+1;
// console.log(`Dice stopped rolling at ${randomNumber}`);
return randomNumber;
}
//++++++++++++++++++++++++++
// Roll dice#1 by calling the rollDice() random number generator function. 
function rollDice1(){
let outcome =rollADice();
one1(outcome);
two1(outcome);
three1(outcome);
four1(outcome);
five1(outcome);
six1(outcome);
animateDiceRoll1();
}
//++++++++++++++++++++++++++
// Now transform the random number generated by the rollADice() function to its corresponding dot pattet by turning on and off the individual dots that conform the dice top face. The dice top face is what shows on the game screen once the dice roll animation ends. Below are six functions. Each function is responsible for handling the on/off pattern of one random numbers 1 trough 6. Only one will come into play for each dice roll. 
function one1(outcome){
if(outcome===1){
dice1dot11.color = 'white';
}
}

function two1(outcome){
if(outcome===2){
dice1dot00.color = 'white';
dice1dot22.color = 'white';
}
}
function three1(outcome){
if(outcome===3){
dice1dot00.color = 'white';
dice1dot11.color = 'white';
dice1dot22.color = 'white';
}
}

function four1(outcome){
if(outcome===4){
dice1dot00.color = 'white';
dice1dot02.color = 'white';
dice1dot20.color = 'white';
dice1dot22.color = 'white';
}
}

function five1(outcome){
if(outcome===5){
dice1dot00.color = 'white';
dice1dot02.color = 'white';
dice1dot11.color = 'white';
dice1dot20.color = 'white';
dice1dot22.color = 'white';
}
}

function six1(outcome){
if(outcome===6){
dice1dot00.color = 'white';
dice1dot10.color = 'white';
dice1dot20.color = 'white';
dice1dot02.color = 'white';
dice1dot12.color = 'white';
dice1dot22.color = 'white';
}
}
// After the dice pattern is defined by above six functions, is time to run the animation. Step1) The function picks one of 10 colors at random.
//++++++++++++++++++++++++++
// Grab dice 1
const firstDice=document.getElementById('dice-one');
// Update dice 1 rotation to a random angle
let angl1;
function rotateDice1 (){
  // Generate a random angle between 0 and 90 in increments of 2
angl1 = Math.floor(
  Math.random()*91
  )/2;
firstDice.style.transform=`rotate(${angl1}deg)`;}
// Update dice 1 color to a random color
function setDice1Color(){
// The possible random colors for dice1:
const colors = ['red','green','blue','orange','deeppink','orangered','black','maroon','purple','teal'];
// Select a color at random
let colorPointer;
colorPointer = Math.floor(
  Math.random()*(colors.length+1)
  );
// Paint dice1 face to the random color
  let color = colors[colorPointer];
firstDice.style.backgroundColor=color;
}

function animateDiceRoll1(){
// Update dice color to a random color
setDice1Color();
// Update dice rotation to a random angle
rotateDice1();
}
//++++++++++++++++++++++++++

// There is probably a better way, but for the time being,I'm just duplicating above procedures for the 2nd dice.
//++++++++++++++++++++++++++
// Grab all dots on each square of dice2
const dice2dot00 = document.getElementById('dice2dot00').style;
const dice2dot01 = document.getElementById('dice2dot01').style;
const dice2dot02 = document.getElementById('dice2dot02').style;
const dice2dot10 = document.getElementById('dice2dot10').style;
const dice2dot11 = document.getElementById('dice2dot11').style;
const dice2dot12 = document.getElementById('dice2dot12').style;
const dice2dot20 = document.getElementById('dice2dot20').style;
const dice2dot21 = document.getElementById('dice2dot21').style;
const dice2dot22 = document.getElementById('dice2dot22').style;
//++++++++++++++++++++++++++

function rollDice2(){
let outcome = rollADice();
one2(outcome);
two2(outcome);
three2(outcome);
four2(outcome);
five2(outcome);
six2(outcome);
animateDiceRoll2();
}
//++++++++++++++++++++++++++
// Define the dot pattern to display on dice2, for each of its 6 random numbers
function one2(outcome){
if(outcome===1){
dice2dot11.color = 'white';
}
}

function two2(outcome){
if(outcome===2){
dice2dot00.color = 'white';
dice2dot22.color = 'white';
}
}

function three2(outcome){
if(outcome===3){
dice2dot00.color = 'white';
dice2dot11.color = 'white';
dice2dot22.color = 'white';
}
}

function four2(outcome){
if(outcome===4){
dice2dot00.color = 'white';
dice2dot02.color = 'white';
dice2dot20.color = 'white';
dice2dot22.color = 'white';
}
}

function five2(outcome){
if(outcome===5){
dice2dot00.color = 'white';
dice2dot02.color = 'white';
dice2dot11.color = 'white';
dice2dot20.color = 'white';
dice2dot22.color = 'white';
}
}

function six2(outcome){
if(outcome===6){
dice2dot00.color = 'white';
dice2dot10.color = 'white';
dice2dot20.color = 'white';
dice2dot02.color = 'white';
dice2dot12.color = 'white';
dice2dot22.color = 'white';
}
}
//++++++++++++++++++++++++++
// Grab dice 2
const secondDice=document.getElementById('dice-two');
// Update dice 2 rotation to a random angle
let angl2;
function rotateDice2 (){
  // Generate a random angle between 0 and 90 in increments of 2

angl2 = Math.floor(
  Math.random()*91
  )/2;
secondDice.style.transform=`rotate(${angl2}deg)`;}
// Update dice 2 color to a random color
function setDice2Color(){
// The possible random colors for dice2:
const colors = ['red','green','blue','orange','deeppink','orangered','black','maroon','purple','teal'];
// Select a color at random
let colorPointer;
colorPointer = Math.floor(
  Math.random()*(colors.length+1)
  );
// Paint dice2 face to the random color
  let color = colors[colorPointer]
secondDice.style.backgroundColor=color;
}
function animateDiceRoll2(){
// Update dice color to a random color
setDice2Color()
// Update dice rotation to a random angle
rotateDice2();
}
//++++++++++++++++++++++++++
// Roll both dice once
function callAll() {
eraseDots();
rollDice1();
rollDice2();
}

function updateBothAngls (angl){
firstDice.style.transform=`rotate(${angl}deg)`;
secondDice.style.transform=`rotate(${angl}deg)`;
}

// Roll both dice multiple times
function play(){
// Request data from Trivia API via axios
setTimeout(
function() {
// Roll both dice one time
callAll();
setTimeout(
function() {
// Roll both dice one time
callAll();
setTimeout(
function() {
// Roll both dice one time
callAll();
setTimeout(
function() {
// Roll both dice one time
callAll();
// Update final dice rotation to angle 0deg
updateBothAngls(0);
runTheShow();
  }, 600);
  }, 450);
  }, 300);
  }, 150);
 }
//++++++++++++++++++++++++++
const rollDicesBtn = document.getElementById('roll-dice');
rollDicesBtn.addEventListener('click',()=>{obtainAPIobjects();play();});

// Settings to retrieve trivia from API
// https:
//opentdb.com/api.php?amount=10&category=19&difficulty=easy&type=multiple
// Possibilities: 27 animals, 19 math, 18 computers
const triviaTopic='10';
// Possibilities: any Qyt
const triviaQty='10';
// Possibilities: easy, medium, hard
const skillLevel='easy';
// Possibilities: boolean, multiple
const answersType='multiple';
// const url=`https://opentdb.com/api.php?=1&=19&=easy&type=`;
const url=`https://opentdb.com/api.php?amount=${triviaQty}&category=${triviaTopic}&difficulty=${skillLevel}&type=${answersType}`;
// Grab trivia Qs/As
const question=document.querySelector('#question');
const answer1=document.querySelector('#answer1');
const answer2=document.querySelector('#answer2');
const answer3=document.querySelector('#answer3');
const answer4=document.querySelector('#answer4');

function obtainAPIobjects(){
// (1) Firstly, discard previous data
window.localStorage.clear();
// Also, empty containers from old data
question.innerHTML=``;
question.style.color='white';
question.style.fontWeight='normal';
answer1.innerHTML=``;
answer2.innerHTML=``;
answer3.innerHTML=``;
answer4.innerHTML=``;
// (1) Retrieve trivia from Trivia API
// And save response and error to localStorage
console.log(`Retrieve trivia from Trivia API, And save response and error to localStorage`);
axios.get(url, {timeout: 650})
.then((response)=>{console.log(response);window.localStorage.setItem('axiosResponse', JSON.stringify(response));})
.catch((error)=>{console.log(error);window.localStorage.setItem('axiosError', JSON.stringify(error));
//console.log(error.message);
});
} 

const displayTrivia=()=>{
const trivia=axiosResponse.data.results[0];
question.innerHTML=`${trivia.question}`;
question.style.color='white';
answer1.innerHTML=`${trivia.correct_answer}`;
answer2.innerHTML=`${trivia.incorrect_answers[0]}`;
answer3.innerHTML=`${trivia.incorrect_answers[1]}`;
answer4.innerHTML=`${trivia.incorrect_answers[2]}`;};

let axiosResponse;
let axiosError;
function loadLsAxiosInfo(){
//Retrieve response and error from localStorage
console.log(`Retrieve response and error from localStorage`);
axiosResponse=JSON.parse(window.localStorage.getItem('axiosResponse'));
// console.log(`LS axiosResponse Object:`);
  // console.log(axiosResponse);
axiosError=JSON.parse(window.localStorage.getItem('axiosError'));
console.log(`LS axiosError Object:`);
console.log(axiosError);
}

/* 
Object
message:timeout of 1ms exceeded
name:Error
stack:Error: timeout of 1ms exceeded
    at e.exports (http://localhost:8158/rollDice.js:3:9719)
    at XMLHttpRequest.l.ontimeout (http://localhost:8158/rollDice.js:3:8646)
config:Object
code:ECONNABORTED
__proto__:Object
*/

/*
Object
data:Object
response_code:0
results:Array
0:Object
category:Animals
type:multiple
difficulty:easy
question:Hippocampus is the Latin name for which marine creature?
correct_answer:Seahorse
incorrect_answers:Array
__proto__:Object
*/

function reportNoErrObj(){
question.innerHTML=`axios error: Error object not found. 🤷‍♂️`;
question.style.color='red';
question.style.fontWeight='bold';
return;
}

function disectAxiosError(){
// Test for error object arrival 
if(axiosError===null){
reportNoErrObj();
return;
}else if(axiosError.keys().length===0){
console.log(`axios error object is empty.`);
return;
}else{
console.log('axiosError:');
console.log(axiosError);
question. innerHTML=`Trivia error: ${axiosError.message}`;
question.style.color='red';
question.style.fontWeight='bold';
}
return;
} 

function disectAxiosResponse(){
// Test for trivia arrival 
if(axiosResponse===null){
disectAxiosError();
return;
}else if(axiosResponse.data.results.length===0){
console.log(`Amount of trivia items in data array: ', ${axiosResponse.data.results.length}`);
question.innerHTML=`Trivia items in data array: ', ${axiosResponse.data.results.length}. Try again 🤦‍♂️`;
return;
}else{
displayTrivia();
return;
}
}

function runTheShow(){
loadLsAxiosInfo();
disectAxiosResponse();
return;
}

